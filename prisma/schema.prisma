generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NUXT_DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  role          String?
  email         String?
  passwordHash  String?
  googleId      String?
  facebookId    String?
  profile       Json?
  status        Int       @default(1)
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime?
}

model File {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  extention  String?
  type       String
  uploadedAt DateTime @default(now())
}

model Log {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  time    DateTime @default(now())
  message String
  status  Int
}

model Category {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String    @unique
  name          String
  alias         String
  translate     Json?
  product       Product[]
  status        Int       @default(1) // 1. Sử dụng
  createdBy     String
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime?
  lastUpdatedBy String?
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  code          String          @unique
  name          String
  alias         String
  description   String?
  originalPrice Float?
  salePercent   Float?
  translate     Json?
  stock         Stock[]
  category      Category?       @relation(fields: [categoryCode], references: [code])
  // categoryCode  String?         @db.String
  categoryCode  String?
  order         Order[]
  purchaseOrder PurchaseOrder[]
  status        Int             @default(1)
  createdBy     String
  createdAt     DateTime        @default(now())
  lastUpdatedAt DateTime?
  lastUpdatedBy String?
}

model Stock {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  product       Product   @relation(fields: [productCode], references: [code])
  productCode   String
  warehouse     Warehouse @relation(fields: [warehouseCode], references: [code])
  warehouseCode String
  quantity      Int
  status        Int       @default(1)
  createdBy     String
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime?
  lastUpdatedBy String?
}

model Warehouse {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String    @unique
  name          String
  location      String?
  maxCapacity   Int?
  stock         Stock[]
  status        Int       @default(1)
  createdBy     String
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime?
  lastUpdatedBy String?
}

model Supplier {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  contactInfo    String?
  purchaseOrders PurchaseOrder[]
  status         Int             @default(1)
  createdBy      String
  createdAt      DateTime        @default(now())
  lastUpdatedAt  DateTime?
  lastUpdatedBy  String?
}

model Order {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  product       Product   @relation(fields: [productCode], references: [code])
  productCode   String
  quantity      Int
  status        Int       @default(1) // trạng thái đơn hàng: "pending", "shipped", "delivered"
  createdBy     String
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime?
  lastUpdatedBy String?
}

model PurchaseOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  supplierId  String   @db.ObjectId
  product     Product  @relation(fields: [productCode], references: [code])
  productCode String
  quantity    Int
  status      Int      @default(1) // trạng thái: "ordered", "received"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
